---
- name: Prepare host to S3 transport
  hosts: localhost
  gather_facts: True
  vars:
    transport_s3_bucket: java-molecule-s3-test
    transport_s3_path: java/jdk-8u202-windows-x64.exe
    download_path: /tmp
  tasks:
    - name: Download artifact from s3
      aws_s3:
        bucket: '{{ transport_s3_bucket }}'
        object: '{{ transport_s3_path }}'
        dest: '{{ download_path }}/{{ transport_s3_path | basename }}'
        mode: get
        overwrite: different
      retries: 5
      delay: 2

- name: Prepare windows host
  hosts: windows
  gather_facts: True
  tasks:

    - name: Configure protocols
      win_shell: |
        $protocols = @{
          'SSL 2.0'= @{
            'Server-Enabled' = $false
            'Client-Enabled' = $false
          }
          'SSL 3.0'= @{
            'Server-Enabled' = $false
            'Client-Enabled' = $false
          }
          'TLS 1.0'= @{
            'Server-Enabled' = $false
            'Client-Enabled' = $true
          }
          'TLS 1.1'= @{
            'Server-Enabled' = $true
            'Client-Enabled' = $true
          }
          'TLS 1.2'= @{
            'Server-Enabled' = $true
            'Client-Enabled' = $true
          }
        }


        $protocols.Keys | ForEach-Object {

          Write-Output "Configuring '$_'"

          # create registry entries if they don't exist
          $rootPath = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\$_"
          if(-not (Test-Path $rootPath)) {
            New-Item $rootPath
          }

          $serverPath = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\$_\Server"
          if(-not (Test-Path $serverPath)) {
            New-Item $serverPath

            New-ItemProperty -Path $serverPath -Name 'Enabled' -Value 4294967295 -PropertyType 'DWord'
            New-ItemProperty -Path $serverPath -Name 'DisabledByDefault' -Value 0 -PropertyType 'DWord'
          }

          $clientPath = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\$_\Client"
          if(-not (Test-Path $clientPath)) {
            New-Item $clientPath

            New-ItemProperty -Path $clientPath -Name 'Enabled' -Value 4294967295 -PropertyType 'DWord'
            New-ItemProperty -Path $clientPath -Name 'DisabledByDefault' -Value 0 -PropertyType 'DWord'
          }

          # set server settings
          if($protocols[$_]['Server-Enabled']) {
            Set-ItemProperty -Path $serverPath -Name 'Enabled' -Value 4294967295
            Set-ItemProperty -Path $serverPath -Name 'DisabledByDefault' -Value 0
          } else {
            Set-ItemProperty -Path $serverPath -Name 'Enabled' -Value 0
            Set-ItemProperty -Path $serverPath -Name 'DisabledByDefault' -Value 1
          }

          # set client settings
          if($protocols[$_]['Client-Enabled']) {
            Set-ItemProperty -Path $clientPath -Name 'Enabled' -Value 4294967295
            Set-ItemProperty -Path $clientPath -Name 'DisabledByDefault' -Value 0
          } else {
            Set-ItemProperty -Path $clientPath -Name 'Enabled' -Value 0
            Set-ItemProperty -Path $clientPath -Name 'DisabledByDefault' -Value 1
          }
        }

    - name: Check protocols
      win_shell: |
        [Net.ServicePointManager]::SecurityProtocol
      register: ps_output

    - name: debug ps
      debug:
        msg: "{{ ps_output }}"

#     - name: Enable strong crypto
#       win_regedit:
#         path: "{{ item }}"
#         name: SchUseStrongCrypto
#         type: dword
#         data: 00000001
#       loop:
#         - HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319
#         - HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NETFramework\v4.0.30319

#     - name: reboot windows
#       win_reboot:
#         reboot_timeout: 9000
#         post_reboot_delay: 20
