---
- name: Set base variables based on java distribution
  include_vars: '{{ ansible_system }}/{{ java_distribution }}/base_vars.yml'

- name: 'Fetch oracle artifact with {{ transport }} transport'
  include_tasks: '{{ transport_driver }}'
  with_first_found:
    - 'fetch/{{ transport }}.yml'
    - fetch/unknown-transport.yml
  loop_control:
    loop_var: transport_driver

- name: Set parse variables based on java distribution
  include_vars: java_parts.yml
  when: transport != 'repositories'

- name: Perform install from artifacts
  block:
    - name: Install requirements
      package:
        name: '{{ requirements }}'
        state: present
      register: installed_packages
      until: installed_packages is succeeded
      when: transport != 'repositories'

    - name: 'Perform {{ java_binary_type }} install'
      include_tasks: '{{ ansible_system }}/install/{{ java_tarball_install | ternary("tarball", ansible_os_family) }}.yml'

    - name: debug java_path
      debug:
        var: java_path

    - name: debug java_folder
      debug:
        var: java_folder

    - name: Find java_folder
      find:
        paths: '{{ java_path }}'
        recurse: false
        file_type: directory
        patterns: '{{ java_folder }}'
        use_regex: true
      register: java_dir

    - name: Set actual java directory
      set_fact:
        java_folder: "{{ java_dir.files | map(attribute='path') | list | last | basename }}"

    - name: Put java profile
      template:
        src: java.sh.j2
        dest: /etc/profile.d/java.sh
        owner: root
        group: root
        mode: 0555

    - name: Check for java binaries existence
      stat:
        path: '{{ java_path }}/{{ java_folder }}/bin/{{ binary }}'
      register: java_binary_collection
      loop:
        - java
        - javac
        - jar
      loop_control:
        loop_var: binary

    - name: Update alternatives
      alternatives:
        name: '{{ java_item.binary }}'
        path: '{{ java_path }}/{{ java_folder }}/bin/{{ java_item.binary }}'
        link: '/usr/bin/{{ java_item.binary }}'
        priority: 100
      when: java_item.stat.exists | bool
      loop: '{{ java_binary_collection.results }}'
      loop_control:
        loop_var: java_item
  become: true
